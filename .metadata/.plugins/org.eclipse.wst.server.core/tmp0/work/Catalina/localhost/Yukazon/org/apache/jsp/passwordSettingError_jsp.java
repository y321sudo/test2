/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2018-02-26 04:08:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class passwordSettingError_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/struts2-core-2.3.34.jar", Long.valueOf(1518756150966L));
    _jspx_dependants.put("jar:file:/C:/Users/internousdev/Desktop/workspace/workspace-sudo/test2/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Yukazon/WEB-INF/lib/struts2-core-2.3.34.jar!/META-INF/struts-tags.tld", Long.valueOf(1504613532000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fs_005fform_0026_005faction;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fs_005fsubmit_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fs_005fform_0026_005faction = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fs_005fsubmit_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fs_005fform_0026_005faction.release();
    _005fjspx_005ftagPool_005fs_005fsubmit_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\r\n");
      out.write("\t<meta http-equiv=\"Content-Script-Type\" content=\"text/javascript\" />\r\n");
      out.write("\t<meta http-equiv=\"imagetoolbar\" content=\"no\" />\r\n");
      out.write("\t<meta name=\"description\" content=\"\" />\r\n");
      out.write("\t<meta name=\"keywords\" content=\"\" />\r\n");
      out.write("\r\n");
      out.write("\t<title>秘密の質問エラー</title>\r\n");
      out.write("\t<style type=\"text/css\">\r\n");
      out.write("\t\tbody {\r\n");
      out.write("\t\t\t/* 要素の外側の余白を指定 */\r\n");
      out.write("\t\t   margin:0;\r\n");
      out.write("\t\t\t/*要素の内側の余白を指定 */\r\n");
      out.write("\t\t   padding:0;\r\n");
      out.write("\t\t\t/*行の高さを指定 */\r\n");
      out.write("\t\t   line-height:1.6;\r\n");
      out.write("\t\t\t/*文字の間隔を指定 */\r\n");
      out.write("\t\t   letter-spacing:1px;\r\n");
      out.write("\t\t\t/*フォントの種類を指定*/\r\n");
      out.write("\t\t   font-family:Verdana, Helvetica, sans-serif;\r\n");
      out.write("\t\t\t/*文字の大きさ・色 */\r\n");
      out.write("\t\t   font-size:12px;\r\n");
      out.write("\t\t   color:#333;\r\n");
      out.write("\t\t\t/*背景に関する属性をまとめて設定 */\r\n");
      out.write("\t\t   background:#fff;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\ttable {\r\n");
      out.write("\t\t\t/*横位置の揃え方を設定 */\r\n");
      out.write("\t\t\ttext-align:center;\r\n");
      out.write("\t\t\tmargin:0 auto;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("/* ========TEMPLATE LAYOUT======== */\r\n");
      out.write("\t\t#top {\r\n");
      out.write("\t\t\t/* ボックス領域の幅を設定 */\r\n");
      out.write("\t\t   width:780px;\r\n");
      out.write("\t\t   margin:30px auto;\r\n");
      out.write("\t\t\t/* 要素の周囲に枠線を設定 */\r\n");
      out.write("\t\t   border:1px solid #333;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t#header {\r\n");
      out.write("\t\t   width: 100%;\r\n");
      out.write("\t\t\t/*要素の高さを設定 */\r\n");
      out.write("\t\t   height: 80px;\r\n");
      out.write("\t\t\t/*背景色を設定 */\r\n");
      out.write("\t\t   background-color: black;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t#main {\r\n");
      out.write("\t\t   width: 100%;\r\n");
      out.write("\t\t   height: 500px;\r\n");
      out.write("\t\t   text-align: center;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t#footer {\r\n");
      out.write("\t\t\twidth: 100%;\r\n");
      out.write("\t\t\theight: 80px;\r\n");
      out.write("\t\t\tbackground-color: black;\r\n");
      out.write("\t\t\t/*要素の回り込み(float)を解除 */\r\n");
      out.write("\t\t\tclear:both;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t#error{\r\n");
      out.write("\t\t\tcolor:red;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t#text-center {\r\n");
      out.write("\t\t\t/*要素の表示形式を設定、インラインレベルのブロックコンテナを生成 */\r\n");
      out.write("\t\t\tdisplay: inline-block;\r\n");
      out.write("\t\t\ttext-align: center;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"header\">\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"main\">\r\n");
      out.write("\t\t<div id=\"top\">\r\n");
      out.write("\t\t\t<p>Error</p>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<div id=\"error\">\r\n");
      out.write("\t\t\t<h3>IDと秘密の質問、答えが一致しません。</h3>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\t<br><br>\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t<!-- \"パスワード再設定画面へ\"ボタンを押すと\"PasswordSettingAction\"へ -->\r\n");
      out.write("\t\t\t");
      if (_jspx_meth_s_005fform_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t<br><br>\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<span>ログイン画面に戻る場合は</span>\r\n");
      out.write("\t\t\t\t<a href=\"http://localhost:8080/Yukazon/home.jsp\">こちら</a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"footer\">\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_s_005fform_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:form
    org.apache.struts2.views.jsp.ui.FormTag _jspx_th_s_005fform_005f0 = (org.apache.struts2.views.jsp.ui.FormTag) _005fjspx_005ftagPool_005fs_005fform_0026_005faction.get(org.apache.struts2.views.jsp.ui.FormTag.class);
    _jspx_th_s_005fform_005f0.setPageContext(_jspx_page_context);
    _jspx_th_s_005fform_005f0.setParent(null);
    // /passwordSettingError.jsp(95,3) name = action type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_s_005fform_005f0.setAction("PasswordSettingAction");
    int _jspx_eval_s_005fform_005f0 = _jspx_th_s_005fform_005f0.doStartTag();
    if (_jspx_eval_s_005fform_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
      if (_jspx_eval_s_005fform_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
        out = _jspx_page_context.pushBody();
        _jspx_th_s_005fform_005f0.setBodyContent((javax.servlet.jsp.tagext.BodyContent) out);
        _jspx_th_s_005fform_005f0.doInitBody();
      }
      do {
        out.write("\r\n");
        out.write("\t\t\t\t<tr>\r\n");
        out.write("\t\t\t\t\t<td>\r\n");
        out.write("\t\t\t\t\t\t<label>ユーザーID(半角英数字)<font color=\"red\">必須</font>:</label>\r\n");
        out.write("\t\t\t\t\t<br><br></td>\r\n");
        out.write("\t\t\t\t\t<td>\r\n");
        out.write("\t\t\t\t\t\t<input type=\"text\" name=\"loginUserId\" pattern=\"^[0-9A-Za-z]+$\" title=\"半角英数字でご入力ください。\" required />\r\n");
        out.write("\t\t\t\t\t<br><br></td>\r\n");
        out.write("\t\t\t\t</tr>\r\n");
        out.write("\t\t\t\t<tr>\r\n");
        out.write("\t\t\t\t\t<td>\r\n");
        out.write("\t\t\t\t\t\t<label>パスワードを忘れた時の質問<font color=\"red\">必須</font>:</label>\r\n");
        out.write("\t\t\t\t\t</td>\r\n");
        out.write("\t\t\t\t\t<td>\r\n");
        out.write("\t\t\t\t\t\t<select name=\"secretQuestion\">\r\n");
        out.write("\t\t\t\t\t\t\t<option value=\"質問を選んでください\" selected=\"selected\">質問を選んでください</option>\r\n");
        out.write("\t\t\t\t\t\t\t<option value=\"好きな食べ物は？\">好きな食べ物は？</option>\r\n");
        out.write("\t\t\t\t\t\t\t<option value=\"小学校の名前は？\">小学校の名前は？</option>\r\n");
        out.write("\t\t\t\t\t\t\t<option value=\"母親の旧姓は？\">母親の旧姓は？</option>\r\n");
        out.write("\t\t\t\t\t\t</select>\r\n");
        out.write("\t\t\t\t\t</td>\r\n");
        out.write("\t\t\t\t</tr>\r\n");
        out.write("\t\t\t\t<tr>\r\n");
        out.write("\t\t\t\t\t<td>\r\n");
        out.write("\t\t\t\t\t\t<label>答え(全角ひらがな)<font color=\"red\">必須</font>:</label>\r\n");
        out.write("\t\t\t\t\t<br><br>\r\n");
        out.write("\t\t\t\t\t</td>\r\n");
        out.write("\t\t\t\t\t<td>\r\n");
        out.write("\t\t\t\t\t\t<!-- 答えの入力制限:全角ひらがな2文字以上、入力必須項目 -->\r\n");
        out.write("\t\t\t\t\t\t<input type=\"text\" name=\"secretAnswer\" placeholder=\"最低2文字必要です\" pattern=\"^[ぁ-ん]+$\" title=\"全角ひらがな2文字以上でご入力ください。\" required />\r\n");
        out.write("\t\t\t\t\t<br><br>\r\n");
        out.write("\t\t\t\t\t</td>\r\n");
        out.write("\t\t\t\t</tr>\r\n");
        out.write("\t\t\t\t\t");
        if (_jspx_meth_s_005fsubmit_005f0(_jspx_th_s_005fform_005f0, _jspx_page_context))
          return true;
        out.write("\r\n");
        out.write("\t\t\t");
        int evalDoAfterBody = _jspx_th_s_005fform_005f0.doAfterBody();
        if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
          break;
      } while (true);
      if (_jspx_eval_s_005fform_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
        out = _jspx_page_context.popBody();
      }
    }
    if (_jspx_th_s_005fform_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fs_005fform_0026_005faction.reuse(_jspx_th_s_005fform_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fs_005fform_0026_005faction.reuse(_jspx_th_s_005fform_005f0);
    return false;
  }

  private boolean _jspx_meth_s_005fsubmit_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_s_005fform_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  s:submit
    org.apache.struts2.views.jsp.ui.SubmitTag _jspx_th_s_005fsubmit_005f0 = (org.apache.struts2.views.jsp.ui.SubmitTag) _005fjspx_005ftagPool_005fs_005fsubmit_0026_005fvalue_005fnobody.get(org.apache.struts2.views.jsp.ui.SubmitTag.class);
    _jspx_th_s_005fsubmit_005f0.setPageContext(_jspx_page_context);
    _jspx_th_s_005fsubmit_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_s_005fform_005f0);
    // /passwordSettingError.jsp(128,5) name = value type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_s_005fsubmit_005f0.setValue("パスワード再設定へ");
    int _jspx_eval_s_005fsubmit_005f0 = _jspx_th_s_005fsubmit_005f0.doStartTag();
    if (_jspx_th_s_005fsubmit_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fs_005fsubmit_0026_005fvalue_005fnobody.reuse(_jspx_th_s_005fsubmit_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fs_005fsubmit_0026_005fvalue_005fnobody.reuse(_jspx_th_s_005fsubmit_005f0);
    return false;
  }
}
